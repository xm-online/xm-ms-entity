import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "groovy"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "checkstyle"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "io.spring.nohttp"
    id "com.github.spotbugs"
    id "war"
    id "pmd"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.icthh.xm.ms.entity"

description = ""

sourceCompatibility = 11
targetCompatibility = 11
assert System.properties["java.specification.version"] == "11" || "12" || "13"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/version.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

sourceSets {
    // FIXME src/main/lep is not defined as source set because package problem is not resolved yet.
    test {
        groovy {
            srcDirs += ['src/test/lep']
        }
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.main.runtimeClasspath.files
                attributes "Class-Path": classpath.collect { f -> f.toURI().toString() }.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

bootWar {
    mainClassName = 'com.icthh.xm.ms.entity.EntityApp'
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

springBoot {
    mainClassName = 'com.icthh.xm.ms.entity.EntityApp'
}

String[] testCategories = ['com.icthh.xm.ms.entity.AbstractSpringBootTest',
                           'com.icthh.xm.ms.entity.AbstractUnitTest',
                           'com.icthh.xm.ms.entity.AbstractWebMvcTest']

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "passed", "skipped", "failed"//, "standardError" //, "standardOut"
}

test {

    doFirst {
        println '!!! ATTENTION: start execution of non-categorized tests. it may impact test performance !!!'
    }

    exclude '**/CucumberTest*'
    dependsOn 'clean', 'runCategorizedTests'
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    mkdir("src/test/features")
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // to run all test that was not categorized
    useJUnit {
        excludeCategories(testCategories)
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = true
    testLogging testLoggingConf

    doLast {
        println '!!! ATTENTION: check if there are non-categorized tests !!!'
    }

}

task runCategorizedTests(type: Test) {
    useJUnit {
        includeCategories(testCategories)
    }
    testLogging testLoggingConf
}

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include '**/CucumberTest*'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn cucumberTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver ""
            url ""
            username "test"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver ""
            url ""
            username "test"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.icthh.xm.ms.entity.domain?dialect=&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}")

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation "io.github.jhipster:jhipster-framework"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.dropwizard.metrics:metrics-json"
    implementation "io.dropwizard.metrics:metrics-jvm"
    implementation "io.dropwizard.metrics:metrics-servlet"
    implementation "io.dropwizard.metrics:metrics-servlets"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    // log4j2-mock needed to create embedded elasticsearch instance with SLF4J
    runtimeOnly "de.dentrassi.elasticsearch:log4j2-mock:${log4j2_mock_version}"
    // end of Spring Data Jest dependencies
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation "org.springframework.cloud:spring-cloud-security"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security.oauth:spring-security-oauth2"
    implementation "org.springframework.security:spring-security-jwt"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"
    implementation "com.h2database:h2"
    implementation "org.postgresql:postgresql"
    liquibaseRuntime "org.postgresql:postgresql"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    // XM custom dependencies
    implementation("com.github.java-json-tools:json-schema-validator:2.2.8") {
        exclude group: 'javax.mail', module: 'mailapi'
    }
    implementation "com.amazonaws:aws-java-sdk-s3:1.11.158"
    implementation "com.amazonaws:aws-java-sdk-core:1.11.158"
    // "org.json:json" already present in org.apache.geronimo.bundles:json:20090211_1 dependency for jackson-datatype-json-org
    //compile "org.json:json:20160212" // for LinkedIn LEP
    implementation "org.jsoup:jsoup:1.10.2" // for LinkedIn LEP
    implementation "com.jayway.jsonpath:json-path"
    implementation "com.mortennobel:java-image-scaling:0.8.6"
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.11.0"

    implementation("com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}") {
        exclude group: "io.github.jhipster", module: "jhipster-framework"
    }
    implementation "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-timeline:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-migration-db:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-scheduler:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-mail:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-topic:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-configurable:${xm_commons_version}"

    implementation "org.freemarker:freemarker:${freemarker_version}"
    implementation "org.apache.poi:poi-ooxml:${apache_poi_version}"
    implementation "org.modelmapper:modelmapper:${modelmapper_version}"
    implementation "com.github.bohnman:squiggly-filter-jackson:${squiggly_filter_version}"

    // test dependencies
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation "io.cucumber:cucumber-junit"
    testImplementation "io.cucumber:cucumber-spring"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "com.h2database:h2"
    liquibaseRuntime "com.h2database:h2"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
    testImplementation "com.adobe.testing:s3mock-junit4:2.0.11"
    testImplementation "org.testcontainers:testcontainers:1.10.1"
    testImplementation "org.awaitility:awaitility:3.1.5"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.23.2"

}

checkstyle {
    toolVersion = "7.6.1"
    ignoreFailures = true
    configFile = rootProject.file('./qa/checkstyle.xml')
}

spotbugs {
    ignoreFailures = true
}

pmd {
    rulePriority = 3
    toolVersion = '5.5.4'
    ignoreFailures = true
    ruleSetFiles = files("./qa/pmd.xml")
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.0.1"
}

task stage(dependsOn: 'bootWar') {
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
