import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "groovy"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "checkstyle"
    id "eclipse"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "io.spring.nohttp"
    id "war"
    id "pmd"
    id 'io.spring.dependency-management' version '1.1.4'
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

group = "com.icthh.xm.ms.entity"

description = ""

sourceCompatibility = 21
targetCompatibility = 21
assert System.properties["java.specification.version"] == "21"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/version.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

sourceSets {
    test {
        groovy {
            srcDirs += ['src/test/lep']
        }
    }
    main {
        groovy {
            srcDirs += ['src/main/lep']
        }
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    tasks.register('classpathJar', Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.main.runtimeClasspath.files
                attributes "Class-Path": classpath.collect { f -> f.toURI().toString() }.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

bootWar {
    mainClass = 'com.icthh.xm.ms.entity.EntityApp'
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

springBoot {
    mainClass = 'com.icthh.xm.ms.entity.EntityApp'
}

String[] testCategories = ['com.icthh.xm.ms.entity.AbstractSpringBootTest',
                           'com.icthh.xm.ms.entity.AbstractUnitTest',
                           'com.icthh.xm.ms.entity.AbstractWebMvcTest']

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "passed", "skipped", "failed"//, "standardError" //, "standardOut"
}

test {

    doFirst {
        println '!!! ATTENTION: start execution of non-categorized tests. it may impact test performance !!!'
    }

    exclude '**/CucumberTest*'
    exclude '**/*ElasticsearchTest*'
    dependsOn 'clean', 'runCategorizedTests'
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    mkdir("src/test/features")
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // to run all test that was not categorized
    useJUnit {
        excludeCategories(testCategories)
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = true
    testLogging testLoggingConf

    doLast {
        println '!!! ATTENTION: check if there are non-categorized tests !!!'
    }

}

tasks.register('runCategorizedTests', Test) {
    useJUnitPlatform {
        includeTags(testCategories)
    }
    testLogging testLoggingConf
}

tasks.register('cucumberTest', Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include '**/CucumberTest*'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

check.dependsOn cucumberTest

tasks.register('runElasticsearchTest', Test) {
    description = 'Execute elasticsearch tests'
    group = 'verification'

    filter {
        includeTestsMatching "*ElasticsearchTest*"
    }

    systemProperty 'spring.profiles.active', 'test'
    dependsOn 'clean'

    useJUnitPlatform {
        includeTags ['com.icthh.xm.ms.entity.elasticsearch.AbstractElasticSpringBootTest']
    }
    reports.html.required = false
}

tasks.register('testReport', TestReport) {
    getDestinationDirectory().set(file("$buildDir/reports/tests"))
    reportOn test
}

tasks.register('cucumberTestReport', TestReport) {
    getDestinationDirectory().set(file("$buildDir/reports/tests"))
    reportOn test
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver ""
            url ""
            username "test"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver ""
            url ""
            username "test"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.icthh.xm.ms.entity.domain?dialect=&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    configureEach {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
    //VK FIXME: remove before merge
    maven {
        url "https://reposilite.jevera.software/releases"
    }
}

dependencies {
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    implementation "tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}"

    implementation group: "tech.jhipster", name: "jhipster-framework"

    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.dropwizard.metrics:metrics-json"
    implementation "io.dropwizard.metrics:metrics-jvm"
    implementation "io.dropwizard.metrics:metrics-servlet"
    implementation "io.dropwizard.metrics:metrics-servlets"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:${liquibaseHibernate6Version}"
    implementation "org.springframework:spring-aop"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    // log4j2-mock needed to create embedded elasticsearch instance with SLF4J
    runtimeOnly "de.dentrassi.elasticsearch:log4j2-mock:${log4j2_mock_version}"
    // end of Spring Data Jest dependencies
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web:${zalandoVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon:${netflixVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix:${netflixVersion}"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation "org.springframework.cloud:spring-cloud-security:${cloudVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors:${cloudConnectorsVersion}"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-jwt:${securityJwtVersion}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation "io.swagger:swagger-annotations:${swaggerVersion}"
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}") {
        exclude module: "mapstruct"
    }
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-observation'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "io.springfox:springfox-bean-validators:${springfoxVersion}"
    implementation "com.h2database:h2"
    implementation "org.postgresql:postgresql"
    liquibaseRuntime "org.postgresql:postgresql"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    // XM custom dependencies
    implementation("com.github.java-json-tools:json-schema-validator:${jsonSchemaValidatorVersion}") {
        exclude group: 'javax.mail', module: 'mailapi'
    }
    implementation "com.amazonaws:aws-java-sdk-s3:${amazonawsVersion}"
    implementation "com.amazonaws:aws-java-sdk-core:${amazonawsVersion}"
    implementation "org.jsoup:jsoup:1.18.1" // for LinkedIn LEP
    implementation "com.jayway.jsonpath:json-path"
    implementation "com.mortennobel:java-image-scaling:${mortennobelVersion}"
    implementation "org.codehaus.groovy.modules.http-builder:http-builder:${codehausVersion}"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'com.fasterxml.jackson.module:jackson-module-jsonSchema'
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'

    implementation("com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}") {
        exclude group: "io.github.jhipster", module: "jhipster-framework"
    }
    implementation "com.icthh.xm.commons:xm-commons-client-feign:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-groovy:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-js:${xm_commons_version}" // optional
    implementation "com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-timeline:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-migration-db:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-scheduler:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-mail:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-topic:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-configurable:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-trace:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-domainevent:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-domainevent-db:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-domainevent-outbox:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-search:${xm_commons_version}"

    annotationProcessor "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"

    implementation "org.freemarker:freemarker:${freemarker_version}"
    implementation "org.apache.poi:poi-ooxml:${apache_poi_version}"
    implementation "org.modelmapper:modelmapper:${modelmapper_version}"
    implementation "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    implementation "org.apache.httpcomponents.client5:httpclient5:${httpClient5Version}"
    implementation "io.hypersistence:hypersistence-utils-hibernate-63:${hypersistenceVersion}"

    // security fixes
    implementation "io.netty:netty-buffer:${netty_version}"
    implementation "io.netty:netty-codec:${netty_version}"
    implementation "io.netty:netty-codec-http:${netty_version}"
    implementation "io.netty:netty-common:${netty_version}"
    implementation "io.netty:netty-handler:${netty_version}"
    implementation "io.netty:netty-resolver:${netty_version}"
    implementation "io.netty:netty-transport:${netty_version}"
    implementation "commons-beanutils:commons-beanutils:${beanutils_version}"
    implementation "io.undertow:undertow-core:${undertow_version}"
    implementation "io.undertow:undertow-servlet:${undertow_version}"
    implementation "io.undertow:undertow-websockets-jsr:${undertow_version}"

    implementation 'com.intellij:annotations:12.0'

    implementation 'commons-fileupload:commons-fileupload'

    // test dependencies
    testCompileOnly "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"
    testAnnotationProcessor "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation 'io.cucumber:cucumber-junit:7.18.1'
    testImplementation 'io.cucumber:cucumber-spring:7.18.1'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "com.h2database:h2"
    liquibaseRuntime "com.h2database:h2"
    testImplementation "com.adobe.testing:s3mock-junit4:${s3mockVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation "org.wiremock:wiremock-jetty12:${wiremockVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:elasticsearch:${testcontainersVersion}"
    testImplementation "co.elastic.clients:elasticsearch-java:${elastic_client_version}"

}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion = "${checkstyleToolVersion}"
    ignoreFailures = true
    configFile file("qa/checkstyle.xml")
    checkstyleTest.enabled = false
}

//spotbugs {
//    toolVersion = "${spotbugsToolVersion}"
//    ignoreFailures = true
//}

pmd {
    toolVersion "${pmdToolVersion}"
    ignoreFailures = true
    ruleSetFiles = files("./qa/pmd.xml")
}

tasks.register('cleanResources', Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "8.9"
}

tasks.register('stage') {
    dependsOn 'bootWar'
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
